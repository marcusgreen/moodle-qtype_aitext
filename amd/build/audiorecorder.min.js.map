{"version":3,"file":"audiorecorder.min.js","sources":["../src/audiorecorder.js"],"sourcesContent":["define(['jquery', 'core/log','core/notification', 'qtype_aitext/audiohelper','qtype_aitext/browserrec','core/str','qtype_aitext/timer' ],\n    function ($, log, notification, audioHelper, browserRec,str, timer) {\n    \"use strict\"; // jshint ;_;\n    /*\n    *  The TT recorder\n     */\n\n    log.debug('qtype_aitext Audio Recorder: initialising');\n\n    return {\n        waveHeight: 75,\n        audio: {\n            stream: null,\n            blob: null,\n            dataURI: null,\n            start: null,\n            end: null,\n            isRecording: false,\n            isRecognizing: false,\n            transcript: null\n        },\n        submitting: false,\n        controls: {},\n        uniqueid: null,\n        audio_updated: null,\n        maxtime: 15000,\n        passagehash: null,\n        region: null,\n        asrurl: null,\n        lang: null,\n        browserrec: null,\n        usebrowserrec: false,\n        currentTime: 0,\n        stt_guided: false,\n        currentPrompt: false,\n        strings: {},\n\n        //for making multiple instances\n        clone: function () {\n            return $.extend(true, {}, this);\n        },\n\n        init: function(opts){\n            var that = this;\n            this.uniqueid=opts['uniqueid'];\n            this.callback=opts['callback'];\n            this.stt_guided = opts['stt_guided'] ? opts['stt_guided'] : false;\n            this.init_strings();\n            this.prepare_html();\n            this.register_events();\n\n            // Callbacks.\n\n            // Callback: Timer updates.\n            var handle_timer_update = function(){\n                var displaytime = that.timer.fetch_display_time();\n                that.controls.timerstatus.html(displaytime);\n                if (that.timer.seconds == 0 && that.timer.initseconds > 0) {\n                    that.update_audio('isRecognizing', true);\n                    that.audiohelper.stop();\n                }\n            };\n\n            // Callback: Recorder device errors.\n            var on_error = function(error) {\n                switch (error.name) {\n                    case 'PermissionDeniedError':\n                    case 'NotAllowedError':\n                        notification.alert(\"Error\",that.strings.allowmicaccess, \"OK\");\n                        break;\n                    case 'DevicesNotFoundError':\n                    case 'NotFoundError':\n                        notification.alert(\"Error\",that.strings.nomicdetected, \"OK\");\n                        break;\n                    default:\n                        //other errors, like from Edge can fire repeatedly so a notification is not a good idea\n                        //notification.alert(\"Error\", error.name, \"OK\");\n                        log.debug(\"Error\", error.name);\n                }\n            };\n\n            // Callback: Recording stopped.\n            var on_stopped = function(blob) {\n                that.timer.stop()\n\n                //if the blob is undefined then the user is super clicking or something\n                if(blob===undefined){\n                    return;\n                }\n\n                //if ds recc\n                var newaudio = {\n                    blob: blob,\n                    dataURI: URL.createObjectURL(blob),\n                    end: new Date(),\n                    isRecording: false,\n                    length: Math.round((that.audio.end - that.audio.start) / 1000),\n                };\n                that.update_audio(newaudio);\n\n                that.deepSpeech2(that.audio.blob, function(response){\n                    log.debug(response);\n                    if(response.data.result===\"success\" && response.data.transcript){\n                        that.gotRecognition(response.data.transcript.trim());\n                    } else {\n                        notification.alert(\"Information\",that.strings.speechnotrecognized, \"OK\");\n                    }\n                    that.update_audio('isRecognizing',false);\n                });\n\n            };\n\n            // Callback: Recorder device got stream - start recording\n            var on_gotstream=  function(stream) {\n                var newaudio={stream: stream, isRecording: true};\n                that.update_audio(newaudio);\n\n                //TO DO - conditionally start timer here (not toggle recording)\n                //so a device error does not cause timer disaster\n                // that.timer.reset();\n                // that.timer.start();\n                \n            };\n\n            //If browser rec (Chrome Speech Rec) (and ds is optiona)\n            if(browserRec.will_work_ok() && ! this.stt_guided){\n                //Init browserrec\n                log.debug(\"using browser rec\");\n                log.debug('arh : ' + that.uniqueid);\n                that.browserrec = browserRec.clone();\n                log.debug('arh : ' + that.uniqueid);\n                that.browserrec.init(that.lang,that.waveHeight,that.uniqueid);\n                that.usebrowserrec=true;\n\n                //set up events\n                that.browserrec.onerror = on_error;\n                that.browserrec.onend = function(){\n                        //do something here\n                };\n                that.browserrec.onstart = function(){\n                    //do something here\n                };\n                that.browserrec.onfinalspeechcapture=function(speechtext){\n                    that.gotRecognition(speechtext);\n                    that.update_audio('isRecording',false);\n                    that.update_audio('isRecognizing',false);\n                };\n\n                that.browserrec.oninterimspeechcapture=function(speechtext){\n                    that.gotInterimRecognition(speechtext);\n                };\n\n            //If DS rec\n            }else {\n                //set up wav for ds rec\n                log.debug(\"using ds rec\");\n                this.audiohelper =  audioHelper.clone();\n                this.audiohelper.init(this.waveHeight,this.uniqueid,this);\n\n                that.audiohelper.onError = on_error;\n                that.audiohelper.onStop = on_stopped;\n                that.audiohelper.onStream = on_gotstream;\n\n            }//end of setting up recorders\n\n            // Setting up timer.\n            this.timer = timer.clone();\n            this.timer.init(this.maxtime, handle_timer_update);\n            // Init the timer readout\n            handle_timer_update();\n        },\n\n        init_strings: function(){\n            var that=this;\n            str.get_strings([\n                { \"key\": \"allowmicaccess\", \"component\": 'mod_minilesson'},\n                { \"key\": \"nomicdetected\", \"component\": 'mod_minilesson'},\n                { \"key\": \"speechnotrecognized\", \"component\": 'mod_minilesson'},\n\n            ]).done(function (s) {\n                var i = 0;\n                that.strings.allowmicaccess = s[i++];\n                that.strings.nomicdetected = s[i++];\n                that.strings.speechnotrecognized = s[i++];\n            });\n        },\n\n        prepare_html: function(){\n            this.controls.recordercontainer =$('.audiorec_container_' + this.uniqueid);\n            this.controls.recorderbutton = $('.' + this.uniqueid + '_recorderdiv');\n            this.controls.timerstatus = $('.timerstatus_' + this.uniqueid);\n            this.passagehash = this.controls.recorderbutton.data('passagehash');\n            this.region=this.controls.recorderbutton.data('region');\n            this.lang=this.controls.recorderbutton.data('lang');\n            this.asrurl=this.controls.recorderbutton.data('asrurl');\n            this.maxtime=this.controls.recorderbutton.data('maxtime');\n            this.waveHeight=this.controls.recorderbutton.data('waveheight');\n        },\n\n        silence_detected: function(){\n            if(this.audio.isRecording){\n                this.toggleRecording();\n            }\n        },\n\n        update_audio: function(newprops,val){\n            if (typeof newprops === 'string') {\n                log.debug('update_audio:' + newprops + ':' + val);\n                if (this.audio[newprops] !== val) {\n                    this.audio[newprops] = val;\n                    this.audio_updated();\n                }\n            }else{\n                for (var theprop in newprops) {\n                    this.audio[theprop] = newprops[theprop];\n                    log.debug('update_audio:' + theprop + ':' + newprops[theprop]);\n                }\n                this.audio_updated();\n            }\n        },\n\n        register_events: function(){\n            var that = this;\n            this.controls.recordercontainer.click(function(){\n                that.toggleRecording();\n            });\n\n            this.audio_updated=function() {\n                //pointer\n                if (that.audio.isRecognizing) {\n                    that.show_recorder_pointer('none');\n                } else {\n                    that.show_recorder_pointer('auto');\n                }\n\n                if(that.audio.isRecognizing || that.audio.isRecording ) {\n                    this.controls.recorderbutton.css('background', '#e52');\n                }else{\n                    this.controls.recorderbutton.css('background', 'green');\n                }\n\n                //div content WHEN?\n                that.controls.recorderbutton.html(that.recordBtnContent());\n            };\n\n        },\n\n        show_recorder_pointer: function(show){\n            if(show) {\n                this.controls.recorderbutton.css('pointer-events', 'none');\n            }else{\n                this.controls.recorderbutton.css('pointer-events', 'auto');\n            }\n\n        },\n\n\n        gotRecognition:function(transcript){\n            log.debug('transcript:' + transcript);\n            var message={};\n            message.type='speech';\n            message.capturedspeech = transcript;\n           //POINT\n            this.callback(message);\n        },\n\n        gotInterimRecognition:function(transcript){\n            var message={};\n            message.type='interimspeech';\n            message.capturedspeech = transcript;\n            //POINT\n            this.callback(message);\n        },\n\n        cleanWord: function(word) {\n            return word.replace(/['!\"#$%&\\\\'()\\*+,\\-\\.\\/:;<=>?@\\[\\\\\\]\\^_`{|}~']/g,\"\").toLowerCase();\n        },\n\n        recordBtnContent: function() {\n\n            if(!this.audio.isRecognizing){\n\n                if (this.audio.isRecording) {\n                    return '<i class=\"fa fa-stop\">';\n                } else {\n                    return '<i class=\"fa fa-microphone\">';\n                }\n\n            } else {\n                return '<i class=\"fa fa-spinner fa-spin\">';\n            }\n        },\n        toggleRecording: function() {\n            var that =this;\n            //If we are recognizing, then we want to discourage super click'ers\n            if (this.audio.isRecognizing) {\n                return;\n            }\n\n            //If we are current recording\n            if (this.audio.isRecording) {\n                that.timer.stop();\n\n                //If using Browser Rec (chrome speech)\n                if(this.usebrowserrec){    \n                    that.update_audio('isRecording',false);\n                    that.update_audio('isRecognizing',true);\n                    this.browserrec.stop();\n\n                //If using DS rec\n                }else{\n                    this.update_audio('isRecognizing',true);\n                    this.audiohelper.stop();\n                }\n\n             //If we are NOT currently recording\n            } else {\n                // Run the timer\n                that.currentTime = 0;\n                that.timer.reset();\n                that.timer.start();\n                \n\n                //If using Browser Rec (chrome speech)\n                if(this.usebrowserrec){\n                    this.update_audio('isRecording',true);\n                    this.browserrec.start();\n\n                //If using DS Rec\n                }else {\n                    var newaudio = {\n                        stream: null,\n                        blob: null,\n                        dataURI: null,\n                        start: new Date(),\n                        end: null,\n                        isRecording: false,\n                        isRecognizing:false,\n                        transcript: null\n                    };\n                    this.update_audio(newaudio);\n                    this.audiohelper.start();\n                }\n            }\n        },\n\n\n        deepSpeech2: function(blob, callback) {\n            var bodyFormData = new FormData();\n            var blobname = this.uniqueid + Math.floor(Math.random() * 100) +  '.wav';\n            bodyFormData.append('audioFile', blob, blobname);\n            bodyFormData.append('scorer', this.passagehash);\n            if(this.stt_guided) {\n                bodyFormData.append('strictmode', 'false');\n            }else{\n                bodyFormData.append('strictmode', 'true');\n            }\n            //prompt is used by whisper and other transcibers down the line\n            if(this.currentPrompt!==false){\n                bodyFormData.append('prompt', this.currentPrompt);\n            }\n            bodyFormData.append('lang', this.lang);\n            bodyFormData.append('wwwroot', M.cfg.wwwroot);\n\n            var oReq = new XMLHttpRequest();\n            oReq.open(\"POST\", this.asrurl, true);\n            oReq.onUploadProgress= function(progressEvent) {};\n            oReq.onload = function(oEvent) {\n                if (oReq.status === 200) {\n                    callback(JSON.parse(oReq.response));\n                } else {\n                    callback({data: {result: \"error\"}});\n                    log.debug(oReq.error);\n                }\n            };\n            try {\n                oReq.send(bodyFormData);\n            }catch(err){\n                callback({data: {result: \"error\"}});\n                log.debug(err);\n            }\n        },\n\n    };//end of return value\n\n});"],"names":["define","$","log","notification","audioHelper","browserRec","str","timer","debug","waveHeight","audio","stream","blob","dataURI","start","end","isRecording","isRecognizing","transcript","submitting","controls","uniqueid","audio_updated","maxtime","passagehash","region","asrurl","lang","browserrec","usebrowserrec","currentTime","stt_guided","currentPrompt","strings","clone","extend","this","init","opts","that","callback","init_strings","prepare_html","register_events","handle_timer_update","displaytime","fetch_display_time","timerstatus","html","seconds","initseconds","update_audio","audiohelper","stop","on_error","error","name","alert","allowmicaccess","nomicdetected","will_work_ok","onerror","onend","onstart","onfinalspeechcapture","speechtext","gotRecognition","oninterimspeechcapture","gotInterimRecognition","onError","onStop","undefined","newaudio","URL","createObjectURL","Date","length","Math","round","deepSpeech2","response","data","result","trim","speechnotrecognized","onStream","get_strings","done","s","i","recordercontainer","recorderbutton","silence_detected","toggleRecording","newprops","val","theprop","click","show_recorder_pointer","css","recordBtnContent","show","message","capturedspeech","cleanWord","word","replace","toLowerCase","reset","bodyFormData","FormData","blobname","floor","random","append","M","cfg","wwwroot","oReq","XMLHttpRequest","open","onUploadProgress","progressEvent","onload","oEvent","status","JSON","parse","send","err"],"mappings":"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"}